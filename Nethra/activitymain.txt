package com.example.dictator.blind;

import android.app.Activity;
import android.bluetooth.BluetoothAdapter;
import android.content.Intent;
import android.database.Cursor;
import android.database.SQLException;
import android.os.Bundle;
import android.speech.tts.TextToSpeech;
import android.support.v4.view.GestureDetectorCompat;
import android.util.Log;
import android.view.GestureDetector;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.widget.Toast;

import com.rabitech.nearals.NearalService;
import com.rabitech.nearals.NearalsReciver;
import com.rabitech.nearals.datatypes.Nearal;
import com.rabitech.nearals.datatypes.NearalList;
import com.rabitech.nearals.interfaces.NearalsBeaconListener;

import java.io.IOException;
import java.util.Locale;

public class MainActivity extends Activity implements NearalsBeaconListener, GestureDetector.OnGestureListener,
        GestureDetector.OnDoubleTapListener {

    TextToSpeech t1;
    /*
    EditText ed1;
    Button b1, room1;
    TextView textView;
    */
    String s;

    public DataBaseHelper myDbHelper;
    public NearalsReciver reciver;
    private static final String DEBUG_TAG = "Gestures";
    private GestureDetectorCompat mDetector;
    static int count=-1,n;
    static Cursor c;
    @Override
    protected void onCreate(Bundle savedInstanceState) {

        //Button creation
        super.onCreate( savedInstanceState);
        setContentView(R.layout.activity_main);
        //  ed1 = (EditText) findViewById(R.id.editText);
        //  textView = (TextView) findViewById(R.id.textView);
        // b1 = (Button) findViewById(R.id.button);
        //  room1 = (Button) findViewById(R.id.button2);
        mDetector = new GestureDetectorCompat(this,this);
        // Set the gesture detector as the double tap
        // listener.
        mDetector.setOnDoubleTapListener(this);

        //function nearals initialisation
        BeaconInitialise();
        //Database Connection
        DBOpener();
        String direction= myDbHelper.executeQuery();
        c = myDbHelper.allLocation();
        n = myDbHelper.noOfLocations();
        /*
        //Text to Speech module
        textView.setText(direction);
        t1 = new TextToSpeech(getApplicationContext(), new TextToSpeech.OnInitListener() {
            @Override
            public void onInit(int status) {
                if (status != TextToSpeech.ERROR) {
                    t1.setLanguage(Locale.ENGLISH);
                }
            }
        });
        b1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String toSpeak = ed1.getText().toString();
                Toast.makeText(getApplicationContext(), toSpeak, Toast.LENGTH_SHORT).show();
                t1.speak(toSpeak, TextToSpeech.QUEUE_FLUSH, null);
            }
        });
        room1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                t1.speak(room1.getText().toString(), TextToSpeech.QUEUE_FLUSH, null);


            }
        });
        */
    }
    //Overriden methods
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.

        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onStart() {
        super.onStart();
        reciver.registerNearalsBrodcastReciever();
        BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        mBluetoothAdapter.enable();

    }

    @Override
    public void onResume(){
        super.onResume();
        reciver.registerNearalsBrodcastReciever();
        t1 = new TextToSpeech(getApplicationContext(), new TextToSpeech.OnInitListener() {
            @Override
            public void onInit(int status) {
                if (status != TextToSpeech.ERROR) {
                    t1.setLanguage(Locale.ENGLISH);
                }
            }
        });

    }

    @Override
    public void onPause() {

        super.onPause();
        reciver.unRegisterNearalsBrodcastReciever();

    }

    @Override
    public void onStop() {
        super.onStop();
        if (t1 != null) {
            t1.stop();
            t1.shutdown();
        }
    }

    @Override
    public void onDestroy(){
        super.onDestroy();
        BluetoothAdapter mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        if (mBluetoothAdapter.isEnabled()){
            mBluetoothAdapter.disable();
        }

    }

    //Nearals object creation code
    public void BeaconInitialise() {
        Intent serviceIntent = new Intent(this, NearalService.class);
        try {
            startService(serviceIntent);
        }catch (Exception e){
            e.printStackTrace();
            Toast.makeText(getApplicationContext(),e.getMessage(),Toast.LENGTH_LONG).show();
        }
        reciver = new NearalsReciver(MainActivity.this);
        reciver.setOnNearalsBeaconListener(this);
    }

    //Database  creation
    public void DBOpener(){
        myDbHelper = new DataBaseHelper(this);

        try{
            myDbHelper.delete();
        } catch (SQLException sqle ){
            throw new Error("cannot initialize function to delete database" );
        }

        try {

            myDbHelper.createDataBase();

        } catch (IOException ioe) {

            throw new Error("Unable to create database");

        }
        try {

            myDbHelper.openDataBase();

        }catch(SQLException sqle){

            throw sqle;

        }
    }

    //overriden beacon methods
    @Override
    public void OnNearalDetected(Nearal nearal) {
        // t1.speak(nearal.getAddress(), TextToSpeech.QUEUE_FLUSH, null);
        Log.d("blind","On Nearal"+nearal.getAddress()+ " at rssi : "+nearal.getRssi());
        //  textView.setText(nearal.getRssi());
    }

    @Override
    public void OnNearestNearal(Nearal nearal) {
        System.out.println("On Nearest"+nearal.getAddress()+ " at rssi : "+nearal.getRssi());

    }

    @Override
    public void OnNearalList(NearalList nearalList) {

    }

    @Override
    public boolean onTouchEvent(MotionEvent event){
        this.mDetector.onTouchEvent(event);
        // Be sure to call the superclass implementation
        return super.onTouchEvent(event);
    }

    @Override
    public boolean onDown(MotionEvent event) {
        Log.d(DEBUG_TAG,"onDown: " + event.toString());
        return true;
    }

    @Override
    public boolean onFling(MotionEvent event1, MotionEvent event2,
                           float velocityX, float velocityY) {
        count=(count+1)%n;
        c.moveToPosition(count);
        s=c.getString(0);
        Log.d("count","=" +n);
        Log.d("kuttan","at location  "+s);
        t1.speak(s,TextToSpeech.QUEUE_FLUSH, null);
        Log.d(DEBUG_TAG, "onFling: " + event1.toString()+event2.toString());
        return true;
    }

    @Override
    public void onLongPress(MotionEvent event) {
        Log.d(DEBUG_TAG, "onLongPress: " + event.toString());
    }

    @Override
    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX,
                            float distanceY) {
        Log.d(DEBUG_TAG, "onScroll: " + e1.toString()+e2.toString());
        return true;
    }

    @Override
    public void onShowPress(MotionEvent event) {
        Log.d(DEBUG_TAG, "onShowPress: " + event.toString());
    }

    @Override
    public boolean onSingleTapUp(MotionEvent event) {
        Log.d(DEBUG_TAG, "onSingleTapUp: " + event.toString());
        return true;
    }

    @Override
    public boolean onDoubleTap(MotionEvent event) {
        if(count!=-1) {

            Thread timerThread = new Thread(){
                public void run(){
                    try{
                        //sleep(1000);
                        t1.speak("Destination is set for " + s, TextToSpeech.QUEUE_FLUSH, null);
                        sleep(2000);
                    }catch(InterruptedException e){
                        e.printStackTrace();
                    }
                    finally{
                        Intent intent = new Intent(MainActivity.this, Main2Activity.class);
                        //Create the bundle
                        Bundle bundle = new Bundle();

                        //Add your data to bundle
                        bundle.putString("stuff", s);

                        //Add the bundle to the intent
                        intent.putExtras(bundle);

                        //Fire that second activity
                        startActivity(intent);
                    }
                }
            };
            timerThread.start();
            Log.d(DEBUG_TAG, "onDoubleTap: " + event.toString());
        }
        return true;
    }

    @Override
    public boolean onDoubleTapEvent(MotionEvent event) {
        Log.d(DEBUG_TAG, "onDoubleTapEvent: " + event.toString());
        return true;
    }

    @Override
    public boolean onSingleTapConfirmed(MotionEvent event) {
        Log.d(DEBUG_TAG, "onSingleTapConfirmed: " + event.toString());
        return true;
    }



}